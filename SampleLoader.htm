<!DOCTYPE html>
<html lang="en">
	<head>
		<title>SpaeWars Three.js</title>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
		<style>
			body {
				font-family: Monospace;
				background-color: #f0f0f0;
				margin: 0px;
				overflow: hidden;
			}
		</style>
	</head>
	<body>
	<div id="ThreeCanvas"> 
		<script src="three.js-master/build/three.js"></script>
		<script src="three.js-master/examples/js/loaders/DDSLoader.js"></script>
		<script src="three.js-master/examples/js/loaders/MTLLoader.js"></script>
		<script src="three.js-master/examples/js/loaders/OBJLoader.js"></script>
		<script src="three.js-master/examples/js/Detector.js"></script>

		<script src="three.js-master/lib/stats.min.js"></script>

		<script>
			var container, stats;
			var camera, scene, raycaster, renderer, earthMesh, model;
			var mouse = new THREE.Vector2(), INTERSECTED;
			var radius = 100, theta = 0;

			var Rotation = new Array();
		    var ThrustVector = new Array();

		    var ModelAngleX = 0;
		    var ModelAngleY =  0;
		    var ModelAngleZ = 0;
		    var RotationDragRate = 0.0005;
		    var XYChangeRate = 0.001;
		    var MaxRotation = 0.008;
		    var ZChangeRate = 0.005;
		    var Thrust = 0.1;
		    var MaxThrust = 1;
		    var DragRate = 0.5;
		    
		    var CurrentX = 0;
		    var CurrentY = 0;
		    var CurrentZ = 400;
		    
		    var currentlyPressedKeys = {};

	

			
			init();
			animate();
			
			function init() {
				container = document.createElement( 'div' );
				document.body.appendChild( container );
				
				var info = document.createElement( 'div' );
				info.style.position = 'absolute';
				info.style.top = '10px';
				info.style.width = '100%';
				info.style.textAlign = 'center';
				info.innerHTML = 'webgl - space wars';
				container.appendChild( info );
				
				camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 1, 10000 );
				scene = new THREE.Scene();
				var light = new THREE.AmbientLight( 0xf0f0f0 );
				light.position.set( 3000, 3000, -3000 ).normalize();
				scene.add( light );


	

				// model
				var onProgress = function ( xhr ) {
					if ( xhr.lengthComputable ) {
						var percentComplete = xhr.loaded / xhr.total * 100;
						console.log( Math.round(percentComplete, 2) + '% downloaded' );
					}
				};
				var onError = function ( xhr ) { };
				THREE.Loader.Handlers.add( /\.dds$/i, new THREE.DDSLoader() );
				var mtlLoader = new THREE.MTLLoader();
				mtlLoader.setPath( 'Models/Viper/' );
				mtlLoader.load( 'Viper.mtl', function( materials ) {
					materials.preload();
					var objLoader = new THREE.OBJLoader();
					objLoader.setMaterials( materials );
					objLoader.setPath( 'Models/Viper/' );
					objLoader.load( 'Viper.obj', function ( object ) {
						object.position.y = 0;
						model = object;
						model.scale.set( 1, 1, 1 );
						scene.add( object );
					}, onProgress, onError );
				});
				
				
				//
		        Rotation[0] = 0;
		        Rotation[1] = 0;
		        Rotation[2] = 0;
		        
		        ThrustVector[0] = 0;
		        ThrustVector[1] = 0;
		        ThrustVector[2] = 0;
							
				raycaster = new THREE.Raycaster();
				renderer = new THREE.WebGLRenderer();
				renderer.setClearColor( 0xf0f0f0 );
				renderer.setPixelRatio( window.devicePixelRatio );
				renderer.setSize( window.innerWidth, window.innerHeight );
				renderer.sortObjects = false;
				container.appendChild(renderer.domElement);
				stats = new Stats();
				container.appendChild( stats.dom );
				document.addEventListener( 'keydown', handleKeyDown, false );
				document.addEventListener( 'keyup', handleKeyUp, false );

				//
				window.addEventListener( 'resize', onWindowResize, false );
			}
			function onWindowResize() {
				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();
				renderer.setSize( window.innerWidth, window.innerHeight );
			}
			function onDocumentMouseMove( event ) {
				event.preventDefault();
				mouse.x = ( event.clientX / window.innerWidth ) * 2 - 1;
				mouse.y = - ( event.clientY / window.innerHeight ) * 2 + 1;
			}
			//
			function animate() {
				requestAnimationFrame( animate );
				
//				camera.position.x = CurrentX;
//				camera.position.y = CurrentY;
				camera.position.z = CurrentZ;	
				
				camera.lookAt( scene.position );
				handleKeys();
				RotationCalc();
				ThrustCalc();

		        model.rotation.set( ModelAngleX, ModelAngleY, ModelAngleZ );

				render();
				stats.update();
			}
			function render() {
				theta += 0.1;

				//camera.rotation.set ( ModelAngleX, ModelAngleY, ModelAngleZ );
				camera.updateMatrixWorld();
				
				renderer.render( scene, camera );
			}
			
			function RotationCalc() {
	           if (Rotation[0] != 0) {
	                if (Rotation[0] > 0) {
	                    Rotation[0] -= RotationDragRate;
	                }

	                if (Rotation[0] < 0) {
	                    Rotation[0] += RotationDragRate;
	                }

	                if (Math.abs(Rotation[0]) < RotationDragRate) {
	                    Rotation[0] = 0;
	                }
	                ModelAngleX += Rotation[0];
	            }

	            if (Rotation[1] != 0) {
	                if (Rotation[1] > 0) {
	                    Rotation[1] -= RotationDragRate;
	                }

	                if (Rotation[1] < 0) {
	                    Rotation[1] += RotationDragRate;
	                }

	                if (Math.abs(Rotation[1]) < RotationDragRate) {
	                    Rotation[1] = 0
	                }
	                ModelAngleY += Rotation[1];

	            }

	            if ((Rotation[2] != 0) && !(currentlyPressedKeys[37])) {
	                if (Rotation[2] < 0) {
	                    Rotation[2] += ZChangeRate;
	                }

	                if ((Rotation[2] > 0)  && !(currentlyPressedKeys[39])) {
	                    Rotation[2] -= ZChangeRate;
	                }

	                if (Math.abs(Rotation[2]) < ZChangeRate) {
	                    Rotation[2] = 0;
	                }
	                ModelAngleZ = Rotation[2];

	            }
	            }
			
			function ThrustCalc() {
	            if (ThrustVector[2] != 0) {

	                y = Math.sin(ThrustVector[0]) * ThrustVector[2];
	                x = Math.sin(ThrustVector[1]) * ThrustVector[2];
	                z = Math.cos(ThrustVector[1]) * Math.sin((ThrustVector[0]) + Math.PI / 2) * ThrustVector[2];

	                CurrentX += x;
	                CurrentY += y;
	                CurrentZ += z;


	                if (ThrustVector[2] > 0) {
	                    ThrustVector[2] -= DragRate;
	                }

	                if (ThrustVector[2] < 0) {
	                    ThrustVector[2] += DragRate;
	                }

	                if (Math.abs(ThrustVector[2]) < DragRate) {
	                    ThrustVector[2] = 0;
	                }
	            }
		
			}
			
			function handleKeys() {

		        if (currentlyPressedKeys[37]) {
		            // Left cursor key
		            if (Rotation[1] < MaxRotation) {
		                ModelAngleY += XYChangeRate;
		                Rotation[1] += XYChangeRate;
		            }
		        }

		        if (currentlyPressedKeys[39]) {
		            // Right cursor key
		            if  (Rotation[1] > -MaxRotation) {
		                ModelAngleY -= XYChangeRate;
		                Rotation[1] -= XYChangeRate;
		            }

		        }
		        if ((currentlyPressedKeys[38]) && (Rotation[0] < MaxRotation)) {
		            // Up cursor key
		            ModelAngleX += XYChangeRate;
		            Rotation[0] += XYChangeRate;
		        }
		        if ((currentlyPressedKeys[40]) && (Rotation[0] > -MaxRotation)) {
		            // Down cursor key
		            ModelAngleX -= XYChangeRate;
		            Rotation[0] -= XYChangeRate;
		        }
		        if ((currentlyPressedKeys[83]) && (ThrustVector[2] > -MaxThrust))  {
		            // Down "s" key
		            ThrustVector[0] = ModelAngleX;
		            ThrustVector[1] = ModelAngleY;
		            ThrustVector[2] += 1;
		        }

		        if ((currentlyPressedKeys[87]) && (ThrustVector[2] < MaxThrust))  {
		            // Down "w" key
		            ThrustVector[0] = ModelAngleX;
		            ThrustVector[1] = ModelAngleY;
		            ThrustVector[2] -= 1;
		        } 
			}
			
		function handleKeyDown(ev) {
			        currentlyPressedKeys[ev.keyCode] = true;

			        if (ev.keyCode == 32) {
			            // Space Bar
			            if (Pause) {
			                Pause = false;
			            }
			            else {
			                Pause = true;
			            }
			        }
			  }
			
		function handleKeyUp(event) {
			        currentlyPressedKeys[event.keyCode] = false;
			    }

		</script>

	</body>
</html>